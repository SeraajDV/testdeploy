{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/navane/Desktop/Lev3T10/my-dev-porti/components/MyLayout.js\",\n    _this = this;\n\n/* In our app, we'll use a common style across various pages. For this purpose, we can create a common \r\nLayout component and use it for each of our pages. Here's an example: \r\n\r\nSince Next.js is used to create server-rendered pages, adding a link using a normal <a> tag would \r\ncause a link that would be navigated to via the server. \r\nThis is obviously not always necessary. \r\nTo support client-side navigation (this takes place in the browser, without making a request \r\nto the server) we use Next.js’ Link API.*/\nimport Link from \"next/link\";\n/*You can use this built-in component to append elements to the <head> element of the page. \r\nMore info here: https://github.com/zeit/next.js/#populating-head \r\nNotice that we add the link for the stylesheet for using React-Bootstrap components to the <Head>. */\n\nimport Head from \"next/head\";\nimport Header from \"./Header\";\nvar layoutStyle = {\n  margin: 20,\n  padding: 20,\n  border: \"1px solid #DDD\",\n  color: \"#DAEEF9\",\n  fontWeight: \"bolder\"\n};\n/* Notice in the example below that we pass children and title as props to the Layout components.\r\nIf you remove {children}, the Layout cannot render the content we put inside the Layout element. \r\nHave a look at ./pages/index.js to see where we pass props through to this Layout Component. */\n\nvar Layout = function Layout(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"stylesheet\",\n        href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\",\n        integrity: \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\",\n        crossorigin: \"anonymous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: layoutStyle,\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, _this), props.children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["/home/navane/Desktop/Lev3T10/my-dev-porti/components/MyLayout.js"],"names":["Link","Head","Header","layoutStyle","margin","padding","border","color","fontWeight","Layout","props","children"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,EADU;AAElBC,EAAAA,OAAO,EAAE,EAFS;AAGlBC,EAAAA,MAAM,EAAE,gBAHU;AAIlBC,EAAAA,KAAK,EAAE,SAJW;AAKlBC,EAAAA,UAAU,EAAE;AALM,CAApB;AAQA;AACA;AACA;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD;AAAA,sBACb;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AACE,QAAA,GAAG,EAAC,YADN;AAEE,QAAA,IAAI,EAAC,uEAFP;AAGE,QAAA,SAAS,EAAC,yEAHZ;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF,eASE;AAAK,MAAA,KAAK,EAAEP,WAAZ;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,eADF,EAEGO,KAAK,CAACC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA,aATF;AAAA;AAAA;AAAA;AAAA;AAAA,WADa;AAAA,CAAf;;KAAMF,M;AAiBN,eAAeA,MAAf","sourcesContent":["/* In our app, we'll use a common style across various pages. For this purpose, we can create a common \r\nLayout component and use it for each of our pages. Here's an example: \r\n\r\nSince Next.js is used to create server-rendered pages, adding a link using a normal <a> tag would \r\ncause a link that would be navigated to via the server. \r\nThis is obviously not always necessary. \r\nTo support client-side navigation (this takes place in the browser, without making a request \r\nto the server) we use Next.js’ Link API.*/\r\nimport Link from \"next/link\";\r\n/*You can use this built-in component to append elements to the <head> element of the page. \r\nMore info here: https://github.com/zeit/next.js/#populating-head \r\nNotice that we add the link for the stylesheet for using React-Bootstrap components to the <Head>. */\r\nimport Head from \"next/head\";\r\nimport Header from \"./Header\";\r\n\r\nconst layoutStyle = {\r\n  margin: 20,\r\n  padding: 20,\r\n  border: \"1px solid #DDD\",\r\n  color: \"#DAEEF9\",\r\n  fontWeight: \"bolder\",\r\n};\r\n\r\n/* Notice in the example below that we pass children and title as props to the Layout components.\r\nIf you remove {children}, the Layout cannot render the content we put inside the Layout element. \r\nHave a look at ./pages/index.js to see where we pass props through to this Layout Component. */\r\nconst Layout = (props) => (\r\n  <div>\r\n    <Head>\r\n      <link\r\n        rel=\"stylesheet\"\r\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\r\n        crossorigin=\"anonymous\"\r\n      />\r\n    </Head>\r\n    <div style={layoutStyle}>\r\n      <Header />\r\n      {props.children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Layout;\r\n"]},"metadata":{},"sourceType":"module"}